/* ==========================================================================
   Forms
   ========================================================================== */

/* Normalize non-controls
   Restyle and baseline non-control form elements.
   ========================================================================== */

fieldset {
	padding: 0;
	margin: 0;
	border: 0;

	/**
	 * Chrome and Firefox set a `min-width: min-content;` on fieldsets,
	 * so we reset that to ensure it behaves more like a standard block element.
	 * See https://github.com/twbs/bootstrap/issues/12359.
	 */
	min-width: 0;
}

legend {
	display: block;
	width: 100%;
	padding: 0;
	margin-bottom: $line-height-computed;
	font-size: ($font-size-base * 1.5);
	line-height: inherit;
	color: $legend-color;
	border: 0;
	border-bottom: 1px solid $legend-border-color;
}

label {
	display: inline-block;
	max-width: 100%; /* Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141) */
	margin-bottom: 5px;
	font-weight: bold;
}


/* Normalize form controls
========================================================================== */

/**
 * While most of our form styles require extra classes, some basic normalization
 * is required to ensure optimum display with or without those classes to better
 * address browser inconsistencies.
 */

/* Override content-box in Normalize (* isn't specific enough) */
input[type="search"] {
	box-sizing: border-box;
}

/* Position radios and checkboxes better */
input[type="radio"],
input[type="checkbox"] {
	margin: 4px 0 0;
	margin-top: 1px \9; /* IE8-9 */
	line-height: normal;
}

/* Set the height of select and file controls to match text inputs */
input[type="file"] {
	display: block;
}

/* Make range inputs behave like textual form controls */
input[type="range"] {
	display: block;
	width: 100%;
}

/* Make multiple select elements height not fixed */
select[multiple],
select[size] {
	height: auto;
}

/* Focus for select, file, radio, and checkbox */
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
	@include TabFocus();
}

/* Adjust output element */
output {
	display: block;
	padding-top: ($padding-base-vertical + 1);
	font-size: $font-size-base;
	line-height: $line-height-base;
	color: $input-color;
}

/**
 * Common form controls
 *
 * Shared size and type resets for form controls. Apply `.Form-control` to any
 * of the following form controls:
 *
 * select
 * textarea
 * input[type="text"]
 * input[type="password"]
 * input[type="datetime"]
 * input[type="datetime-local"]
 * input[type="date"]
 * input[type="month"]
 * input[type="time"]
 * input[type="week"]
 * input[type="number"]
 * input[type="email"]
 * input[type="url"]
 * input[type="search"]
 * input[type="tel"]
 * input[type="color"]
 */

.Form-control {
	display: block;
	width: 100%;
	height: $input-height-base; /* Make inputs at least the height of their button counterpart (base line-height + padding + border) */
	padding: $padding-base-vertical $padding-base-horizontal;
	font-size: $font-size-base;
	line-height: $line-height-base;
	color: $input-color;
	background-color: $input-bg;
	background-image: none; /* Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214 */
	border: 1px solid $input-border;
	border-radius: $input-border-radius;
	box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
	transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;

	/* Customize the `:focus` state to imitate native WebKit styles. */
	@include FormControlFocus();

	/* Placeholder */
	&::placeholder {
		color: $input-color-placeholder;
		opacity: 1;
	}
}


/**
 * Disabled and read-only inputs
 * Note: HTML5 says that controls under a fieldset > legend:first-child won't
 * be disabled if the fieldset is disabled. Due to implementation difficulty,
 * we don't honor that edge case; we style them as disabled anyway.
 */
.Form-control[disabled],
.Form-control[readonly],
fieldset[disabled].Form-control {
	background-color: $input-bg-disabled;
	opacity: 1; /* iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655 */
}

.Form-control[disabled],
fieldset[disabled].Form-control {
	cursor: $cursor-disabled;
}

/* Reset height for `textarea`s */
textarea.Form-control {
	height: auto;
}



/**
 * Search inputs in iOS
 *
 * This overrides the extra rounded corners on search inputs in iOS so that our
 * `.Form-control` class can properly style them. Note that this cannot simply
 * be added to `.Form-control` as it's not specific enough. For details, see
 * https://github.com/twbs/bootstrap/issues/11586.
 */

input[type="search"] {
	-webkit-appearance: none;
}



/**
 * Special styles for iOS temporal inputs
 *
 * In Mobile Safari, setting `display: block` on temporal inputs causes the
 * text within the input to become vertically misaligned.
 * As a workaround, we set a pixel line-height that matches the
 * given height of the input. Since this fucks up everything else, we have to
 * appropriately reset it for Internet Explorer and the size variations.
 *
 * Note that as of 8.3, iOS doesn't support `datetime` or `week`.
 */

@media screen and (-webkit-min-device-pixel-ratio: 0) {
	input[type="date"],
	input[type="time"],
	input[type="datetime-local"],
	input[type="month"] {
		line-height: $input-height-base;

		&.Input--small {
			line-height: $input-height-small;
		}

		&.Input--large {
			line-height: $input-height-large;
		}
	}
}

/**
 * Form groups
 *
 * Designed to help with the organization and spacing of vertical forms. For
 * horizontal forms, use the predefined grid classes.
 */
.Form-group {
	margin-bottom: $form-group-margin-bottom;
}



/**
 * Checkboxes and radios
 *
 * Indent the labels to position radios/checkboxes as hanging controls.
 */

.Radio,
.Checkbox {
	position: relative;
	display: block;
	margin-top: 10px;
	margin-bottom: 10px;

	label {
		min-height: $line-height-computed; /* clear the floating input if there is no label text */
		padding-left: 20px;
		margin-bottom: 0;
		font-weight: normal;
		cursor: pointer;
	}
}

.Radio input[type="radio"],
.Radio--inline input[type="radio"],
.Checkbox input[type="checkbox"],
.Checkbox--inline input[type="checkbox"] {
	position: absolute;
	margin-left: -20px;
	margin-top: 4px \9;
}

.Radio + .Radio,
.Checkbox + .Checkbox {
	margin-top: -5px; /* Move up sibling radios or checkboxes for tighter spacing */
}

/* Radios and checkboxes on same line */
.Radio--inline,
.Checkbox--inline {
	position: relative;
	display: inline-block;
	padding-left: 20px;
	margin-bottom: 0;
	vertical-align: middle;
	font-weight: normal;
	cursor: pointer;
}

.Radio--inline + .Radio--inline,
.Checkbox--inline + .Checkbox--inline {
	margin-top: 0;
	margin-left: 10px; /* space out consecutive inline controls */
}



/**
 * Apply same disabled cursor tweak as for inputs
 * Note: Neither radios nor checkboxes can be readonly.
 */
input[type="radio"],
input[type="checkbox"] {
	&[disabled],
	&.is-disabled,
	fieldset[disabled] & {
		cursor: $cursor-disabled;
	}
}

/* These classes are used directly on <label>s */
.Radio--inline,
.Checkbox--inline {
	&.is-disabled,
	fieldset[disabled] & {
		cursor: $cursor-disabled;
	}
}

/* These classes are used on elements with <label> descendants */
.Radio,
.Checkbox {
	&.is-disabled,
	fieldset[disabled] & {
		label {
			cursor: $cursor-disabled;
		}
	}
}

/**
 * Static form control text
 *
 * Apply class to a `p` element to make any string of text align with labels in
 * a horizontal form layout.
 */

.Form-control--static {
	/* Size it appropriately next to real form controls */
	padding-top: ($padding-base-vertical + 1);
	padding-bottom: ($padding-base-vertical + 1);

	/* Remove default margin from `p` */
	margin-bottom: 0;

	.Input--small,
	.Input--large {
		padding-left: 0;
		padding-right: 0;
	}
}



/**
 * Form control sizing
 */

@include InputSize(
	".Input--small",
	$input-height-small,
	$padding-small-vertical,
	$padding-small-horizontal,
	$font-size-small,
	$line-height-small,
	$input-border-radius-small
);

.Form-group--small {
	.Form-control {
		height: $input-height-small;
		padding: $padding-small-vertical $padding-small-horizontal;
		font-size: $font-size-small;
		line-height: $line-height-small;
		border-radius: $input-border-radius-small;
	}

	select.Form-control {
		height: $input-height-small;
		line-height: $input-height-small;
	}

	textarea.Form-control,
	select[multiple].Form-control {
		height: auto;
	}

	.Form-control--static {
		height: $input-height-small;
		min-height: ($line-height-computed + $font-size-small);
		padding: ($padding-small-vertical + 1) $padding-small-horizontal;
		font-size: $font-size-small;
		line-height: $line-height-small;
	}
}

@include InputSize(
	".Input--large",
	$input-height-large,
	$padding-large-vertical,
	$padding-large-horizontal,
	$font-size-large,
	$line-height-large,
	$input-border-radius-large
);


.Form-group--large {
	.Form-control {
		height: $input-height-large;
		padding: $padding-large-vertical $padding-large-horizontal;
		font-size: $font-size-large;
		line-height: $line-height-large;
		border-radius: $input-border-radius-large;
	}

	select.Form-control {
		height: $input-height-large;
		line-height: $input-height-large;
	}

	textarea.Form-control,
	select[multiple].Form-control {
		height: auto;
	}

	.Form-control--static {
		height: $input-height-large;
		min-height: ($line-height-computed + $font-size-large);
		padding: ($padding-large-vertical + 1) $padding-large-horizontal;
		font-size: $font-size-large;
		line-height: $line-height-large;
	}
}



/**
 * Form control feedback states
 * Apply contextual and semantic states to individual form controls.
 */

.has-feedback {
/* Enable absolute positioning */
position: relative;

/* Ensure icons don't overlap text */
	.Form-control {
		padding-right: ($input-height-base * 1.25);
	}
}

/* Feedback icon (requires .glyphicon classes) */
.Form-control-feedback {
	position: absolute;
	top: 0;
	right: 0;
	z-index: 2; /* Ensure icon is above input groups */
	display: block;
	width: $input-height-base;
	height: $input-height-base;
	line-height: $input-height-base;
	text-align: center;
	pointer-events: none;
}

.Input--large + .Form-control-feedback,
.InputGroup--large + .Form-control-feedback,
.Form-group--large .Form-control + .Form-control-feedback {
	width: $input-height-large;
	height: $input-height-large;
	line-height: $input-height-large;
}

.Input--small + .Form-control-feedback,
.InputGroup--small + .Form-control-feedback,
.Form-group--small .Form-control + .Form-control-feedback {
	width: $input-height-small;
	height: $input-height-small;
	line-height: $input-height-small;
}

/* Warning */
.has-warning {
	@include FormControlValidation(
		$state-warning-text,
		$state-warning-text,
		$state-warning-bg
	);
}

/* Error */
.has-error {
	@include FormControlValidation(
		$state-danger-text,
		$state-danger-text,
		$state-danger-bg
	);
}

/* Success */
.has-success {
	@include FormControlValidation(
		$state-success-text,
		$state-success-text,
		$state-success-bg
	);
}

/* Reposition feedback icon if input has visible label above */
.has-feedback label {
	& ~ .Form-control-feedback {
		top: ($line-height-computed + 5); /* Height of the `label` and its margin */
	}

	&.u-screenReaderOnly ~ .Form-control-feedback {
		top: 0;
	}
}



/**
 * Help text
 *
 * Apply to any element you wish to create light text for placement immediately
 * below a form control. Use for general help, formatting, or instructional text.
 */

.HelpBlock {
	display: block; /* account for any element using help-block */
	margin-top: 5px;
	margin-bottom: 10px;
	color: lighten($text-color, 25%); /* lighten the text some for contrast */
}



/**
 * Inline forms
 *
 * Make forms appear inline(-block) by adding the `.form-inline` class. Inline
 * forms begin stacked on extra small (mobile) devices and then go inline when
 * viewports reach <768px.
 *
 * Requires wrapping inputs and labels with `.Form-group` for proper display of
 * default HTML form controls and our custom form controls (e.g., input groups).
 *
 * Heads up! This is mixin-ed into `.Navbar-form` in navbars.less.
 */
.Form--inline {

	/* Kick in the inline */
	@media (min-width: $screen-small-min) {

		/* Inline-block all the things for "inline" */
		.Form-group {
			display: inline-block;
			margin-bottom: 0;
			vertical-align: middle;
		}

		/* In navbar-form, allow folks to *not* use `.Form-group` */
		.Form-control {
			display: inline-block;
			width: auto; /* Prevent labels from stacking above inputs in `.Form-group` */
			vertical-align: middle;
		}

		/* Make static controls behave like regular ones */
		.Form-control--static {
			display: inline-block;
		}

		.InputGroup {
			display: inline-table;
			vertical-align: middle;

			.InputGroup-addon,
			.InputGroup-button,
			.Form-control {
				width: auto;
			}
		}

		/* Input groups need that 100% width though */
		.InputGroup > .Form-control {
			width: 100%;
		}

		.ControlLabel {
			margin-bottom: 0;
			vertical-align: middle;
		}

		/**
		 * Remove default margin on radios/checkboxes that were used for stacking, and
		 * then undo the floating of radios and checkboxes to match.
		 */
		.Radio,
		.Checkbox {
			display: inline-block;
			margin-top: 0;
			margin-bottom: 0;
			vertical-align: middle;

			label {
				padding-left: 0;
			}
		}

		.Radio input[type="radio"],
		.Checkbox input[type="checkbox"] {
			position: relative;
			margin-left: 0;
		}

		/* Re-override the feedback icon. */
		.has-feedback .Form-control-feedback {
			top: 0;
		}
	}
}

/**
 * Horizontal forms
 *
 * Horizontal forms are built on grid classes and allow you to create forms with
 * labels on the left and inputs on the right.
 */

 .Form--horizontal {

	/**
	 * Consistent vertical alignment of radios and checkboxes
	 * Labels also get some reset styles, but that is scoped to a media query below.
	 */
	.Radio,
	.Checkbox,
	.Radio--inline,
	.Checkbox--inline {
		margin-top: 0;
		margin-bottom: 0;
		padding-top: ($padding-base-vertical + 1); /* Default padding plus a border */
	}

	/**
	 * Account for padding we're adding to ensure the alignment and of help text
	 * and other content below items
	 */
	.Radio,
	.Checkbox {
		min-height: ($line-height-computed + ($padding-base-vertical + 1));
	}

	/* Make form groups behave like rows */
	.Form-group {
		@include MakeRow();
	}

	/**
	 * Reset spacing and right align labels, but scope to media queries so that
	 * labels on narrow viewports stack the same as a default form example.
	 */
	@media (min-width: $screen-small-min) {
		.ControlLabel {
			text-align: right;
			margin-bottom: 0;
			padding-top: ($padding-base-vertical + 1); /* Default padding plus a border */
		}
	}

	/**
	 * Validation states
	 *
	 * Reposition the icon because it's now within a grid column and columns have
	 * `position: relative;` on them. Also accounts for the grid gutter padding.
	 */
	.has-feedback .Form-control-feedback {
		right: floor(($grid-gutter-width / 2));
	}

	/**
	 * Form group sizes
	 *
	 * Quick utility class for applying `.input-lg` and `.input-sm` styles to the
	 * inputs and labels within a `.form-group`.
	 */
	.Form-group--large {
		@media (min-width: $screen-small-min) {
			.ControlLabel {
				padding-top: (($padding-large-vertical * $line-height-large) + 1);
			}
		}
	}
	.Form-group--small {
		@media (min-width: $screen-small-min) {
			.ControlLabel {
				padding-top: ($padding-small-vertical + 1);
			}
		}
	}
}
