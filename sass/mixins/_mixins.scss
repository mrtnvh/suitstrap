/* ==========================================================================
   Mixins
   ========================================================================== */
/**
 * TODO
 *	- Replace Bootstraps default gradients with Compass's
*/

/* Utilities
   ========================================================================== */

	/**
	 * Clearfix
	 * Source: http://nicolasgallagher.com/MicroClearfix-hack/
	 *
	 * For modern browsers
	 * 1. The space content is one way to avoid an Opera bug when the
	 * contenteditable attribute is included anywhere else in the document.
	 * Otherwise it causes space to appear at the top and bottom of elements
	 * that are clearfixed.
	 * 2. The use of `table` rather than `block` is only necessary if using
	 *`:before` to contain the top-margins of child elements.
	 */

	@mixin MicroClearfix() {
		&:before,
		&:after {
			content: " "; /* 1 */
			display: table; /* 2 */
		}
		&:after {
			clear: both;
		}
	}

	/* Webkit-style focus */
	@mixin TabFocus() {
		/* Default */
		outline: thin dotted #333;
		/* Webkit */
		outline: 5px auto -webkit-focus-ring-color;
		outline-offset: -2px;
	}

	/* Center-align a block level element */
	@mixin CenterBlock() {
		display: block;
		margin-left: auto;
		margin-right: auto;
	}

	/* Sizing shortcuts */
	@mixin Size($width, $height) {
		width: $width;
		height: $height;
	}
	@mixin Square($size) {
		@include Size($size, $size);
	}

	/* Placeholder text */
	@mixin Placeholder($color: $input-color-placeholder) {
		&:-moz-placeholder{ color: $color; } /* Firefox 4-18 */
		&::-moz-placeholder { color: $color; } /* Firefox 19+ */
		&:-ms-input-placeholder { color: $color; } /* Internet Explorer 10+ */
		&::-webkit-input-placeholder{ color: $color; } /* Safari and Chrome */
	}

	/* Text overflow */
	/* Requires inline-block or block for proper styling */
	@mixin TextOverflow() {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	/**
	 * CSS image replacement
	 *
	 * Heads up! v3 launched with with only `.HideText()`, but per our pattern for
	 * mixins being reused as classes with the same name, this doesn't hold up. As
	 * of v3.0.1 we have added `.TextHide()` and deprecated `.HideText()`. Note
	 * that we cannot chain the mixins together in Less, so they are repeated.
	 *
	 * Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
	 */

	/* Deprecated as of v3.0.1 (will be removed in v4) */
	@mixin HideText() {
		font: 0/0;
		color: transparent;
		text-shadow: none;
		background-color: transparent;
		border: 0;
	}
	/* New mixin to use as of v3.0.1 */
	@mixin TextHide() {
		font: 0/0;
		color: transparent;
		text-shadow: none;
		background-color: transparent;
		border: 0;
	}

/* GRADIENTS
   ========================================================================== */

	/* Horizontal gradient, from left to right */

	/* Creates two color stops, start and end, by specifying a color and position for each color stop. */
	/* Color stops are not available in IE9 and below. */
	@mixin Gradient--horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
		background-image: -webkit-gradient(linear, $start-percent top, $end-percent top, from($start-color), to($end-color)); /* Safari 4+, Chrome 2+ */
		background-image: -webkit-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent)); /* Safari 5.1+, Chrome 10+ */
		background-image: -moz-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); /* FF 3.6+ */
		background-image:linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); /* Standard, IE10 */
		background-repeat: repeat-x;
		filter: e("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb($start-color),argb($end-color)); /* IE9 and down */
	}

	/* Vertical gradient, from top to bottom */

	/* Creates two color stops, start and end, by specifying a color and position for each color stop. */
	/* Color stops are not available in IE9 and below. */
	@mixin Gradient--vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
		background-image: -webkit-gradient(linear, left $start-percent, left $end-percent, from($start-color), to($end-color)); /* Safari 4+, Chrome 2+ */
		background-image: -webkit-linear-gradient(top, $start-color, $start-percent, $end-color, $end-percent); /* Safari 5.1+, Chrome 10+ */
		background-image:-moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent); /* FF 3.6+ */
		background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); /* Standard, IE10 */
		background-repeat: repeat-x;
		filter: e("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($start-color),argb($end-color)); /* IE9 and down */
	}

	@mixin Gradient--directional($start-color: #555, $end-color: #333, $deg: 45deg) {
		background-repeat: repeat-x;
		background-image: -webkit-linear-gradient($deg, $start-color, $end-color); /* Safari 5.1+, Chrome 10+ */
		background-image: -moz-linear-gradient($deg, $start-color, $end-color); /* FF 3.6+ */
		background-image: linear-gradient($deg, $start-color, $end-color); /* Standard, IE10 */
	}

	@mixin Gradient--horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
		background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from($start-color), color-stop($color-stop, $mid-color), to($end-color));
		background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
		background-image: -moz-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
		background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
		background-repeat: no-repeat;
		filter: e("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb($start-color),argb($end-color)); /* IE9 and down, gets no color-stop at all for proper fallback */
	}

	@mixin Gradient--vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
		background-image: -webkit-gradient(linear, 0 0, 0 100%, from($start-color), color-stop($color-stop, $mid-color), to($end-color));
		background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
		background-image: -moz-linear-gradient(top, $start-color, $mid-color $color-stop, $end-color);
		background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
		background-repeat: no-repeat;
		filter: e("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($start-color),argb($end-color)); /* IE9 and down, gets no color-stop at all for proper fallback */
	}

	@mixin Gradient--radial($inner-color: #555, $outer-color: #333) {
		background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($inner-color), to($outer-color));
		background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
		background-image: -moz-radial-gradient(circle, $inner-color, $outer-color);
		background-image: radial-gradient(circle, $inner-color, $outer-color);
		background-repeat: no-repeat;
	}

	@mixin Gradient--striped($color: rgba(255,255,255,.15), $angle: 45deg) {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, $color), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, $color), color-stop(.75, $color), color-stop(.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
		background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
	}

	/* Reset filters for IE */
	/* When you need to remove a gradient background, do not forget to use this to reset the IE filter for IE9 and below. */
	@mixin ResetFilter() {
		filter: e("progid:DXImageTransform.Microsoft.gradient(enabled = false)");
	}

/* IMAGES
   ========================================================================== */
	/* Retina images */
	/* Short retina mixin for setting background-image and -size */
	@mixin ImgRetina($file-1x, $file-2x, $width-1x, $height-1x) {
		background-image: url("#{$file-1x}");

		@media
		only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and ( min--moz-device-pixel-ratio: 2),
		only screen and ( -o-min-device-pixel-ratio: 2/1),
		only screen and (min-device-pixel-ratio: 2),
		only screen and (min-resolution: 192dpi),
		only screen and (min-resolution: 2dppx) {
			background-image: url("#{$file-2x}");
			background-size: $width-1x $height-1x;
		}
	}

	/* Responsive image */
	/* Keep images from scaling beyond the width of their parents. */
	@mixin ImgResponsive($display: block) {
		display: $display;
		max-width: 100%; /* Part 1: Set a maximum relative to the parent */
		height: auto; /* Part 2: Scale the height according to the width, otherwise you get stretching */
	}


/* COMPONENT MIXINS
   ========================================================================== */

	/* Horizontal dividers */
	/* Dividers (basically an hr) within dropdowns and nav lists */
	@mixin NavDivider($color: #e5e5e5) {
		height: 1px;
		margin: (($line-height-computed / 2) - 1) 0;
		overflow: hidden;
		background-color: $color;
	}

	/* Panels */
	@mixin PanelVariant($border, $heading-text-color, $heading-bg-color, $heading-border) {
		border-color: $border;

		& > .Panel-heading {
			color: $heading-text-color;
			background-color: $heading-bg-color;
			border-color: $heading-border;
			+ .Panel-collapse .Panel-body {
				border-top-color: $border;
			}
		}
		& > .Panel-footer {
			+ .Panel-collapse .Panel-body {
				border-bottom-color: $border;
			}
		}
	}

	/* Alerts */
	@mixin AlertVariant($background, $border, $text-color) {
		background-color: $background;
		border-color: $border;
		color: $text-color;
		hr {
			border-top-color: darken($border, 5%);
		}
		.Alert-link {
			color: darken($text-color, 10%);
		}
	}

	/* Tables */
	@mixin TableRowVariant($state, $background, $border) {
		/* Exact selectors below required to override `.Table-striped` and prevent inheritance to nested tables. */
		.Table > thead > tr,
		.Table > tbody > tr,
		.Table > tfoot > tr {
			> td.#{$state},
			> th.#{$state},
			&.#{$state} > td,
			&.#{$state} > th {
				background-color: $background;
				border-color: $border;
			}
		}

		/* Hover states for `.Table--hover`*/
		/* Note: this is not available for cells or rows within `thead` or `tfoot`.*/
		.Table--hover > tbody > tr {
			> td.#{$state}:hover,
			> th.#{$state}:hover,
			&.#{$state}:hover > td,
			&.#{$state}:hover > th {
				background-color: darken($background, 5%);
				border-color: darken($border, 5%);
			}
		}
	}

	/* Button variants */
	/* Easily pump out default styles, as well as :hover, :focus, :active,
	   and disabled options for all buttons */
	@mixin ButtonVariant($color, $background, $border) {
		color: $color;
		background-color: $background;
		border-color: $border;

		&:hover,
		&:focus,
		&:active,
		&.isActive,
		.isOpen .Dropdown-toggle & {
			color: $color;
			background-color: darken($background, 8%);
					border-color: darken($border, 12%);
		}
		&:active,
		&.isActive,
		.isOpen .Dropdown-toggle & {
			background-image: none;
		}
		&.isDisabled,
		&[disabled],
		fieldset[disabled] & {
			&,
			&:hover,
			&:focus,
			&:active,
			&.isActive {
				background-color: $background;
						border-color: $border;
			}
		}
	}

	/* Button sizes*/
	@mixin ButtonSize($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
		padding: $padding-vertical $padding-horizontal;
		font-size: $font-size;
		line-height: $line-height;
		border-radius: $border-radius;
	}

	/* Pagination */
	@mixin PaginationSize($padding-vertical, $padding-horizontal, $font-size, $border-radius) {
		> li {
			> a,
			> span {
				padding: $padding-vertical $padding-horizontal;
				font-size: $font-size;
			}
			&:first-child {
				> a,
				> span {
					@include border-left-radius($border-radius);
				}
			}
			&:last-child {
				> a,
				> span {
					@include border-right-radius($border-radius);
				}
			}
		}
	}

	/* Labels */
	@mixin LabelVariant($color) {
		background-color: $color;
		&[href] {
			&:hover,
			&:focus {
				background-color: darken($color, 10%);
			}
		}
	}

	/* Navbar vertical align */
	/* Vertically center elements in the navbar.
	   Example: an element has a height of 30px, so write out `@include NavbarVerticalAlign(30px);` to calculate the appropriate top margin. */
	@mixin NavbarVerticalAlign($element-height) {
		margin-top: (($navbar-height - $element-height) / 2);
		margin-bottom: (($navbar-height - $element-height) / 2);
	}

	/* Progress bars */
	@mixin ProgressBarVariant($color) {
		background-color: $color;
		.Progress--striped & {
			//#gradient > .striped();
		}
	}

	/* Responsive utilities */
	/* More easily include all the states for responsive-utilities.scss. */
	@mixin ResponsiveVisibility() {
		display: block !important;
		tr & {
			display: table-row !important;
		}
		th &,
		td & {
			display: table-cell !important;
		}
	}

	@mixin ResponsiveInvisibility() {
		&,
		tr &,
		th &,
		td & { display: none !important; }
	}


	/* Centered container element */
	@mixin ContainerFixed() {
		margin-right: auto;
		margin-left: auto;
		padding-left:($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
		@include MicroClearfix();
	}

	/* Creates a wrapper for a series of columns */
	@mixin MakeRow($gutter: $grid-gutter-width) {
		margin-left:($gutter / -2);
		margin-right: ($gutter / -2);
		@include MicroClearfix();
	}

	/* Generate the extra small columns */
	@mixin MakeXSColumn($columns, $gutter: $grid-gutter-width) {
		position: relative;
		float: left;
		width: percentage(($columns / $grid-columns));
		/* Prevent columns from collapsing when empty */
		min-height: 1px;
		/* Inner gutter via padding */
		padding-left:($gutter / 2);
		padding-right: ($gutter / 2);
	}

	/* Generate the small columns */
	@mixin MakeSMColumn($columns, $gutter: $grid-gutter-width) {
		position: relative;
		/* Prevent columns from collapsing when empty */
		min-height: 1px;
		/* Inner gutter via padding */
		padding-left:($gutter / 2);
		padding-right: ($gutter / 2);

		/* Calculate width based on number of columns available */
		@media (min-width: $screen-sm-min) {
			float: left;
			width: percentage(($columns / $grid-columns));
		}
	}

	/* Generate the small column offsets */
	@mixin MakeSMColumnOffset($columns) {
		@media (min-width: $screen-sm-min) {
			margin-left: percentage(($columns / $grid-columns));
		}
	}
	@mixin MakeSMColumnPush($columns) {
		@media (min-width: $screen-sm-min) {
			left: percentage(($columns / $grid-columns));
		}
	}
	@mixin MakeSMColumnPull($columns) {
		@media (min-width: $screen-sm-min) {
			right: percentage(($columns / $grid-columns));
		}
	}

	/* Generate the medium columns */
	@mixin MakeMDColumn($columns, $gutter: $grid-gutter-width) {
		position: relative;
		/* Prevent columns from collapsing when empty */
		min-height: 1px;
		/* Inner gutter via padding */
		padding-left:($gutter / 2);
		padding-right: ($gutter / 2);

		/* Calculate width based on number of columns available */
		@media (min-width: $screen-md-min) {
			float: left;
			width: percentage(($columns / $grid-columns));
		}
	}

	/* Generate the medium column offsets */
	@mixin MakeMDColumnOffset($columns) {
		@media (min-width: $screen-md-min) {
			margin-left: percentage(($columns / $grid-columns));
		}
	}
	@mixin MakeMDColumnPush($columns) {
		@media (min-width: $screen-md) {
			left: percentage(($columns / $grid-columns));
		}
	}
	@mixin MakeMDColumnPull($columns) {
		@media (min-width: $screen-md-min) {
			right: percentage(($columns / $grid-columns));
		}
	}

	/* Generate the large columns */
	@mixin MakeLGColumn($columns, $gutter: $grid-gutter-width) {
		position: relative;
		/* Prevent columns from collapsing when empty */
		min-height: 1px;
		/* Inner gutter via padding */
		padding-left:($gutter / 2);
		padding-right: ($gutter / 2);

		/* Calculate width based on number of columns available */
		@media (min-width: $screen-lg-min) {
			float: left;
			width: percentage(($columns / $grid-columns));
		}
	}

	/* Generate the large column offsets */
	@mixin MakeLGColumnOffset($columns) {
		@media (min-width: $screen-lg-min) {
			margin-left: percentage(($columns / $grid-columns));
		}
	}
	@mixin MakeLGColumnPush($columns) {
		@media (min-width: $screen-lg-min) {
			left: percentage(($columns / $grid-columns));
		}
	}
	@mixin MakeLGColumnPull($columns) {
		@media (min-width: $screen-lg-min) {
			right: percentage(($columns / $grid-columns));
		}
	}

	/* Form validation states */
	/* Used in forms.less to generate the form validation CSS for warnings, errors, and successes. */
	@mixin FormControlValidation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
		/* Color the label and help text */
		.HelpBlock,
		.ControlLabel {
			color: $text-color;
		}
		/* Set the border and box shadow on specific inputs to match */
		.Form-control {
			border-color: $border-color;
			@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); /* Redeclare so transitions work */
			&:focus {
				border-color: darken($border-color, 10%);
				@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%));
			}
		}
		/* Set validation states also for addons */
		.InputGroup-addon {
			color: $text-color;
			border-color: $border-color;
			background-color: $background-color;
		}
	}

	/**
	 * Form control focus state
	 * Generate a customized focus state and for any input with the specified color,
	 * which defaults to the `$input-focus-border` variable.
	 *
	 * We highly encourage you to not customize the default value, but instead use
	 * this to tweak colors on an as-needed basis. This aesthetic change is based on
	 * WebKit's default styles, but applicable to a wider range of browsers. Its
	 * usability and accessibility should be taken into account with any change.
	 *
	 * Example usage: change the default blue border and shadow to white for better
	 * contrast against a dark gray background.
	 */

	@mixin FormControlFocus($color: $input-border-focus) {
		$color-rgba: rgba(red($color), green($color), blue($color), .6);
		&:focus {
			border-color: $color;
			outline: 0;
			@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px #{$color-rgba});
		}
	}

	/**
	 * Form control sizing
	 * Relative text size, padding, and border-radii changes for form controls. For
	 * horizontal sizing, wrap controls in the predefined grid classes. `<select>`
	 * element gets special love because it's special, and that's a fact!
	 */

	@mixin InputSize($input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
		height: $input-height;
		padding: $padding-vertical $padding-horizontal;
		font-size: $font-size;
		line-height: $line-height;
		border-radius: $border-radius;

		select & {
			height: $input-height;
			line-height: $input-height;
		}

		textarea & {
			height: auto;
		}
	}
