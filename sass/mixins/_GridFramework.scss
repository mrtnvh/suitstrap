// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin MakeGridColumns() {
	// Common styles for all sizes of grid columns, widths 1-12
	$col-classes: "";
	$delimiter: ", ";

	@for $i from 1 through length($grid-breakpoints) {
		@for $j from 1 through $grid-columns {

			@if ($j < $grid-columns) and ($i < length($grid-breakpoints)) {
				$delimiter: ", ";
			}

			$col-classes : $col-classes + ".Col--" + nth($grid-breakpoints, $i) + "--" + $j + $delimiter;
		}
	}

	#{$col-classes} {
		position: relative;
		/* Prevent columns from collapsing when empty */
		min-height: 1px;
		/* Inner gutter via padding */
		padding-left:    ($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
	}
}



@mixin FloatGridColumns($class) {
	// Common styles for all sizes of grid columns, widths 1-12
	$col-classes: "";
	$delimiter: ", ";

	@for $j from 1 through $grid-columns {

		@if ($j < $grid-columns) {
			$delimiter: ", ";
		}

		$col-classes : $col-classes + ".Col--" + $class + "--" + $j + $delimiter;
	}

	#{$col-classes} {
		float: left;
	}
}



@mixin CalcGridColumn($index, $class, $type) {

	@if ($type == width) {
		.Col--#{$class + "--" + $index} {
			width: percentage(($index / $grid-columns));
		}
	} @else if ($type == push) {
		.Col--#{$class + "--push--" + $index} {
			left: percentage(($index / $grid-columns));
		}
	} @else if ($type == push) {
		.Col--#{$class}-push-0 {
			left: auto;
		}
	} @else if ($type == pull) {
		.Col--#{$class + "--pull--" + $index} {
			right: percentage(($index / $grid-columns));
		}
	} @else if ($type == pull){
		.Col--#{$class}-pull-0 {
			right: auto;
		}
	} @else if ($type == offset) {
		.Col--#{$class + "--offset--" + $index} {
			margin-left: percentage(($index / $grid-columns));
		}
	}
}



// Basic looping in SCSS
@mixin LoopGridColumns($index, $class, $type) {
	@for $i from 1 through $index {
		@include CalcGridColumn($i, $class, $type);
	}
}



// Create grid for specific class
@mixin MakeGrid($class) {
	@include FloatGridColumns($class);

	$type: "width", "pull", "push", "offset";

	@for $i from 1 through length($type) {
		@include LoopGridColumns($grid-columns, $class, nth($type, $i));
	}
}
