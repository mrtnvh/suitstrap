// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin CakeGridColumns() {
	// Common styles for all sizes of grid columns, widths 1-12
	@mixin Col($index) when ($index = 1) { // initial
		$item: ~".Col-extraSmall--#{$index}, .Col-small--#{$index}, .Col-medium--#{$index}, .Col-large--#{$index}";
		@include Col(($index + 1), $item);
	}

	@mixin Col($index, $list) when ($index =< $grid-columns) { // general; "=<" isn't a typo
		$item: ~".Col-extraSmall--#{$index}, .Col-small--#{$index}, .Col-medium--#{$index}, .Col-large--#{$index}";
		@include Col(($index + 1), ~"#{$list}, #{$item}");
	}

	@mixin Col($index, $list) when ($index > $grid-columns) { // terminal
		#{$list} {
			position: relative;
			// Prevent columns from collapsing when empty
			min-height: 1px;
			// Inner gutter via padding
			padding-left:  ($grid-gutter-width / 2);
			padding-right: ($grid-gutter-width / 2);
		}
	}

	@include Col(1); // kickstart it
}

@mixin CloatGridColumns($class) {
	@include Col($index) when ($index = 1) { // initial
		$item: ~".Col-#{$class}-#{$index}";
		.Col(($index + 1), $item);
	}

	@include Col($index, $list) when ($index =< $grid-columns) { // general
		$item: ~".Col-#{$class}-#{$index}";
		.Col(($index + 1), ~"#{$list}, #{$item}");
	}

	@include Col($index, $list) when ($index > $grid-columns) { // terminal
		#{$list} {
			float: left;
		}
	}

	@include Col(1); // kickstart it
}

@mixin CalcGridColumn($index, $class, $type) when ($type = width) and ($index > 0) {
	.Col-#{$class}-#{$index} {
		width: percentage(($index / $grid-columns));
	}
}
@mixin CalcGridColumn($index, $class, $type) when ($type = push) and ($index > 0) {
	.Col-#{$class}-push-#{$index} {
		left: percentage(($index / $grid-columns));
	}
}
@mixin CalcGridColumn($index, $class, $type) when ($type = push) and ($index = 0) {
	.Col-#{$class}-push-0 {
		left: auto;
	}
}
@mixin CalcGridColumn($index, $class, $type) when ($type = pull) and ($index > 0) {
	.Col-#{$class}-pull-#{$index} {
		right: percentage(($index / $grid-columns));
	}
}
@mixin CalcGridColumn($index, $class, $type) when ($type = pull) and ($index = 0) {
	.Col-#{$class}-pull-0 {
		right: auto;
	}
}
@mixin CalcGridColumn($index, $class, $type) when ($type = offset) {
	.Col-#{$class}-offset-#{$index} {
		margin-left: percentage(($index / $grid-columns));
	}
}

// Basic looping in LESS
@mixin LoopGridColumns($index, $class, $type) when ($index >= 0) {
	.calc-grid-column($index, $class, $type);

	// next iteration
	@mixin LoopGridColumns(($index - 1), $class, $type);
}

// Create grid for specific class
.make-grid($class) {
	.float-grid-columns($class);
	.loop-grid-columns($grid-columns, $class, width);
	.loop-grid-columns($grid-columns, $class, pull);
	.loop-grid-columns($grid-columns, $class, push);
	.loop-grid-columns($grid-columns, $class, offset);
}
