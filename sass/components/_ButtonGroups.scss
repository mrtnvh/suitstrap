/* ==========================================================================
   Button groups
   ========================================================================== */

/* Make the div behave like a button */
.ButtonGroup,
.ButtonGroup--vertical {
	position: relative;
	display: inline-block;
	vertical-align: middle; /* match .Button alignment given font-size hack above */

	> .Button {
		position: relative;
		float: left;

		/* Bring the "active" button to the front */
		&:hover,
		&:focus,
		&:active,
		&.is-active {
			z-index: 2;
		}

		&:focus {
			/* Remove focus outline when dropdown JS adds it after closing the menu */
			outline: 0;
		}
	}
}

/* Prevent double borders when buttons are next to each other */
.ButtonGroup {
	.Button + .Button,
	.Button + .ButtonGroup,
	.ButtonGroup + .Button,
	.ButtonGroup + .ButtonGroup {
		margin-left: -1px;
	}
}

.ButtonGroup > .Button:not(:first-child):not(:last-child):not(.Dropdown-toggle) {
	border-radius: 0;
}

/* Set corners individual because sometimes a single button can be in a .ButtonGroup and we need :first-child and :last-child to both match */
.ButtonGroup > .Button:first-child {
	margin-left: 0;
	&:not(:last-child):not(.Dropdown-toggle) {
		@include BorderRightRadius(0);
	}
}

/* Need .Dropdown-toggle since :last-child doesn't apply given a .Dropdown-menu immediately after it */
.ButtonGroup > .Button:last-child:not(:first-child),
.ButtonGroup > .Dropdown-toggle:not(:first-child) {
	@include BorderLeftRadius(0);
}

/* Custom edits for including BtnGroups within BtnGroups (useful for including dropdown buttons within a BtnGroup) */
.ButtonGroup > .ButtonGroup {
	float: left;
}

.ButtonGroup > .ButtonGroup:not(:first-child):not(:last-child) > .Button {
	border-radius: 0;
}

.ButtonGroup > .ButtonGroup:first-child {
	> .Button:last-child,
	> .Dropdown-toggle {
		@include BorderRightRadius(0);
	}
}

.ButtonGroup > .ButtonGroup:last-child > .Button:first-child {
	@include BorderLeftRadius(0);
}

/* On active and open, don't show outline */
.ButtonGroup .Dropdown-toggle:active,
.ButtonGroup.is-open .Dropdown-toggle {
	outline: 0;
}

/**
/* Sizing
/* Remix the default button sizing classes into new ones for easier manipulation.
 */

.ButtonGroup--extraSmall > .Button {
	@extend .Button--extraSmall;
}

.ButtonGroup--small > .Button {
	@extend .Button--small;
}

.ButtonGroup--large > .Button {
	@extend .Button--large;
}



/* Split button dropdowns
   ========================================================================== */

/* Give the line between buttons some depth*/
.ButtonGroup > .Button + .Dropdown-toggle {
	padding-left: 8px;
	padding-right: 8px;
}

.ButtonGroup > .Button--large + .Dropdown-toggle {
	padding-left: 12px;
	padding-right: 12px;
}

/**
* The clickable button for toggling the menu
* Remove the gradient and set the same inset shadow as the :active state
*/
.ButtonGroup.is-open .Dropdown-toggle {
	box-shadow: inset 0 3px 5px rgba(0,0,0,.125);

	&.Button-link{
		box-shadow: none;
	}
}

/* Reposition the caret */
.Button .Caret {
	margin-left: 0;
}

/* Carets in other button sizes */
.Button--large .Caret {
	border-width: $caret-width-large $caret-width-large 0;
	border-bottom-width: 0;
}

/* Upside down carets for .Dropup */
.Dropup .Button--large .Caret {
	border-width: 0 $caret-width-large $caret-width-large;
}



/* Vertical button groups
   ========================================================================== */

.ButtonGroup--vertical {
	> .Button,
	> .ButtonGroup,
	> .ButtonGroup > .Button {
		display: block;
		float: none;
		width: 100%;
		max-width: 100%;
	}

	/* Clear floats so dropdown menus can be properly placed */
	> .ButtonGroup {
		@include MicroClearfix();

		> .Button {
			float: none;
		}
	}

	> .Button + .Button,
	> .Button + .ButtonGroup,
	> .ButtonGroup + .Button,
	> .ButtonGroup + .ButtonGroup {
		margin-top: -1px;
		margin-left: 0;
	}
}

.ButtonGroup--vertical > .Button {
	&:not(:first-child):not(:last-child) {
		border-radius: 0;
	}

	&:first-child:not(:last-child) {
		border-top-right-radius: $border-radius-base;
		@include BorderBottomRadius(0);
	}

	&:last-child:not(:first-child) {
		border-bottom-left-radius: $border-radius-base;
		@include BorderTopRadius(0);
	}
}

.ButtonGroup--vertical > .ButtonGroup:not(:first-child):not(:last-child) > .Button {
	border-radius: 0;
}

.ButtonGroup--vertical > .ButtonGroup:first-child {
	> .Button:last-child,
	> .Dropdown-toggle {
		@include BorderBottomRadius(0);
	}
}

.ButtonGroup--vertical > .ButtonGroup:last-child:not(:first-child) > .Button:first-child {
	@include BorderTopRadius(0);
}



/* Justified button groups
   ========================================================================== */

.ButtonGroup--justified {
	display: table;
	width: 100%;
	table-layout: fixed;
	border-collapse: separate;

	.Button,
	.ButtonGroup {
		float: none;
		display: table-cell;
		width: 1%;
	}

	> .ButtonGroup .Button {
		width: 100%;
	}

	> .ButtonGroup .Dropdown-menu {
		left: auto;
	}
}



/**
 * Checkbox and radio options
 *
 * In order to support the browser's form validation feedback, powered by the
 * `required` attribute, we have to "hide" the inputs via `opacity`. We cannot
 * use `display: none;` or `visibility: hidden;` as that also hides the popover.
 * This way, we ensure a DOM element is visible to position the popover from.
 *
 * See https://github.com/twbs/bootstrap/pull/12794 for more.
 */

[data-toggle="buttons"] {
	> .Button,
	> .ButtonGroup > .Button {
		input[type="radio"],
		input[type="checkbox"] {
			position: absolute;
			z-index: -1;
			opacity: 0;
		}
	}
}

