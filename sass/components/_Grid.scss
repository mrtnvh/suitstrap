/* ==========================================================================
   Grid system
   ========================================================================== */

/**
 * Container widths
 * Set the container width, and override it for fixed navbars in media queries
 */


/**
 * IMPORTANT CHANGE TOWARDS BOOTSTRAP
 *
 * I chose to use a fluid container as default.
 * HTML without CSS is fluid by default (http://motherfuckingwebsite.com/)
 * Because of the cascading properties of CSS, it is easier and
 * less code to add a few properties than to override them.
 */

.Container {
	@include ContainerFixed();
	max-width: $container--large;

	&.Container--fixed{
		@media (min-width: $screen-small-min) {
			width: $container--small;
		}
		@media (min-width: $screen-medium-min) {
			width: $container--medium;
		}
		@media (min-width: $screen-large-min) {
			width: $container--large;
		}
	}
}

/**
 * Row
 * Rows contain and clear the floats of your columns.
 */

.Row {
	@include MakeRow();
}

/**
 * Columns
 * Common styles for small and large grid columns
 */

@include MakeGridColumns;

/**
 * Extra small grid
 * Columns, offsets, pushes, and pulls for extra small devices like
 * smartphones.
 */

@include MakeGrid(nth($grid-breakpoints, 1));

/**
 * Small grid
 * Columns, offsets, pushes, and pulls for the small device range, from phones
 * to tablets.
 */

@media (min-width: $screen-small-min) {
	@include MakeGrid(nth($grid-breakpoints, 2));
}

/**
 * Medium grid
 * Columns, offsets, pushes, and pulls for the desktop device range.
 */

@media (min-width: $screen-medium-min) {
	@include MakeGrid(nth($grid-breakpoints, 3));
}

/**
 * Large grid
 * Columns, offsets, pushes, and pulls for the large desktop device range.
 */

@media (min-width: $screen-large-min) {
	@include MakeGrid(nth($grid-breakpoints, 4));
}
